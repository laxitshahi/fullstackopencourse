{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAeeA,EAbF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACdC,EAAQF,EAAKG,UACjB,qBAAsB,iBAExB,OACE,qBAAIC,UAAY,OAAhB,UACCJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCIzBK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKJ,UAAU,QAAf,SACGI,KCOQC,EAdA,WAMX,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2G,gBCTFC,EAAU,aA2BD,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAClBC,GAAI,IACJd,QAAS,mCACTe,KAAM,2BACNjB,WAAW,GAEb,OAAOY,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCiG5BK,G,MAlHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAqBhBC,qBAAU,WACRC,IAEGlB,MAAK,SAAAmB,GACJT,EAASS,QAEZ,IAEH,IA0DMC,EAAcP,EAClBJ,EACAA,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,aAE5B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAAW4B,IACzB,8BACE,yBAAQ9B,QAAW,kBAAM6B,GAAYD,IAArC,sBACQA,EAAU,YAAc,MADhC,SAIF,6BACGO,EAAYE,KAAI,SAAA3C,GAAI,OACjB,cAAC,EAAD,CAAqBA,KAAOA,EAAMC,iBAAkB,kBA/CnC,SAAAkB,GACzB,IAAMnB,EAAO8B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAGhC2B,EAAW,2BAAO9C,GAAP,IAAaG,WAAYH,EAAKG,YAG/CoC,EACUpB,EAAI2B,GAAazB,MAAK,SAAA0B,GAE9BhB,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAM+C,SAEnDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJrC,EAAKK,QADD,sCAGf0B,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAMA,MACnC+B,YAAW,WACTb,EAAgB,QACf,QA4B6Dc,CAAmBnD,EAAKmB,MAAtEnB,EAAKmB,SAGvB,uBAAMiC,SA5EM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBlD,QAAS2B,EACTZ,MAAM,IAAIoC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAY3BpB,EACUgB,GACLlC,MAAK,SAAA0B,GACNhB,EAASD,EAAMN,OAAOuB,IACtBd,EAAW,QAuDf,UACE,uBAAO2B,MAAS5B,EAAS6B,SA1BN,SAACR,GAExBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB3B,EAAWoB,EAAMW,OAAOJ,UAwBpB,wBAAQK,KAAM,SAAd,uBAEF,cAAC,EAAD,SCjHNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.af4935c9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance}) => {\r\n  const label = note.important\r\n  ? 'make not important': 'make important'\r\n  \r\n  return (\r\n    <li className = 'note'>\r\n    {note.content}\r\n    <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n    \r\n  )\r\n}\r\n\r\nexport default Note\r\n","import React from 'react'\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n  \r\nexport default Notification","import React from 'react'\r\nconst Footer = () => {\r\n    const footerStyle = {   \r\n      color: 'green',   //react incline style, not CSS\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n    }\r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Footer","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\nconst getAll2 = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll, //names are keys are same so key:name format does not need to be used\r\n  create, \r\n  update\r\n}","import React, {useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\nimport noteService from './services/notes'\r\nimport './index.css'\r\n\r\n//Control Component method to access the data contained in the form's input element\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('');\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n// const hook = () => { // At first, 0 notes are rendered. Thereafter, the function inside useEffect is run \r\n//     console.log('effect')\r\n//     axios\r\n//       .get(\"http://localhost:3001/notes\")\r\n//       .then(response => {\r\n//         console.log('promise fulfilled')\r\n//         setNotes(response.data)\r\n//       })\r\n//     }\r\n//   useEffect(hook, []) \r\n\r\n   // first parameter in useEffect is used to determine the effect\r\n   // the second parameter in useEffect is used to determine how often the effect is run\r\n\r\n\r\n  useEffect(() => { //replacment for get hook?\r\n    noteService \r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault(); // prevents default actions, such as a page reload\r\n    const noteObject = {\r\n      content: newNote, \r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5, // 50% chance of the note being marked important\r\n      // id: notes.length + 1, // method of id creation only works since notes are never deleted let it be hadled by srver\r\n    } \r\n\r\n    // axios\r\n    // .post('http://localhost:3001/notes', noteObject) //no idea property since it's better let the server generate the ids\r\n    // .then(response => {\r\n    //   console.log(response)// the returns \"data\", which stores the new noteObject \r\n    //   setNotes(notes.concat(noteObject)); // CONCAT DOES NOT MUTATE THE ORIGINAL; CREATES NEW COPY\r\n    //   setNewNote(''); // resets controlled input element (clears input bar after submission )\r\n    // }) \r\n\r\n      noteService //replacement for axios.post\r\n        .create(noteObject)\r\n          .then(returnedNote => {\r\n          setNotes(notes.concat(returnedNote))\r\n          setNewNote('')\r\n      })\r\n    }\r\n\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id) //finds note with our specifc id, then assigns to const note\r\n    //note.important = !note.important is not recommended as note is a refrence to notes state \r\n    //NEVER MUTATE STATES DIRECTLY IN REACT\r\n    const changedNote = {...note, important: !note.important} //changedNOte is a shallow copy ()\r\n    //changedNote is just the specific note you want to change\r\n\r\n    noteService\r\n      .update(id, changedNote).then(returnedNote => { // returnedNote = response\r\n     //the response.data is updated when button is clicked, the note is not\r\n      setNotes(notes.map(note => note.id !== id ? note: returnedNote)) //compare ids, if !== the old array object is copied, else the server returned object is copied\r\n    })\r\n    .catch(error => {\r\n      setErrorMessage(\r\n        `Note '${note.content}' was already removed from server`\r\n      )\r\n      setNotes(notes.filter(n => n.id !==id)) \r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n        \r\n      })\r\n  }\r\n \r\n  //need this to allow editing in the input\r\n  const handleNoteChange = (event) => {\r\n    // no event.preventDefault(); needed as there is no action that occurs on input change(editing search bar), whereas for form submission there is\r\n    console.log(event.target.value) // target corresponds to the controlled input element (this is the controlled components method)\r\n    setNewNote(event.target.value) // event.target.value refers to the input value of that target\r\n  }\r\n\r\n  \r\n  const notesToShow = showAll // const result = condition ? val1 : val2; if true show val1, if false show val2\r\n  ? notes\r\n  : notes.filter(note => note.important); //only show important notes (true) (note.important is t/f so no conditional is needed '===true')\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message = {errorMessage}/>\r\n      <div>\r\n        <button onClick = {() => setShowAll(!showAll)}> {/* very simple so it is directly implemented*/}\r\n          show {showAll ? 'important' : 'all'} {/* if show all is true then display show important, and vice versa if flase*/}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note => \r\n            <Note key ={note.id} note ={note} toggleImportance={() => toggleImportanceOf(note.id)} />  \r\n        )}  \r\n      </ul>\r\n      <form onSubmit = {addNote}>\r\n        <input value = {newNote} onChange = {handleNoteChange}/>\r\n        <button type =\"submit\"> save </button>\r\n      </form>\r\n      <Footer/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// this metod has issues as the App component is only rendered when a response is successfully recieved\n// others methods below\n// axios.get('http://localhost:3001/notes').then(response => {   \n//   const notes = response.data  \n//   ReactDOM.render(\n//     <App notes={notes} />,\n//     document.getElementById('root')\n//   )\n// })\n\n// 3 states of a promise in notes.txt file\n\n/*\n\n//less common \nconst promise = axios.get('http://localhost:3001/notes') //axios get() method returns a promise\nconsole.log(promise)\n\npromise.then(response => {\n  console.log(response)\n})  \n\n//more common \n\naxios.get('http://localhost:3001/notes').then(response => {\n  const notes = response.data\n  console.log(notes)\n})\n\n//more readable\n\naxios\n  .get('http://localhost:3001/notes')\n  .then(response => {\n    const notes = response.data\n    console.log(notes)\n  })\n*/"],"sourceRoot":""}